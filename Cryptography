Prefer Public Encryption algorithm over proprietary. Non-peer reviewed ciphers are often reverse-engineered, broken by analysis

Symmetric Single Use Key: key is only used to encrypt one message (e.g. email)
Symmetric Multi Use Key: key is used to encrypt many messages (e.g. file system). Requires more work to be secure.
Digital Signature: Signature is a function of the content being signed, so attacker can't copy from one doc to the next
Secure Multi-Party Computation: Get the total result without revealing individual IDs. Examples: elections, private auctions
Private Outsource of Computation: Outsource a query/function of encrypted data and receive still-encrypted data back in return
Zero Knowledge: Ability to prove that you know the solution to a puzzle without actually disclosing details about that solution

Three Rigorous Steps in Cryptography (for each primitive):   
1. Precisely specify Threat Model (e.g. what can attacker do to attack digital signature? what would his goals be?)
2. Propose a Construction 
3. Prove that breaking Construction under Threat Model will solve an underlying hard problem (e.g. factoring integers)

Symmetric Ciphers: Both sides use the same key (e.g. substitution cipher, Caesar cipher (shift letters by n))
Key space: The set of all possible keys that can be used to generate a key, e.g. for 26 letter substitution cipher would be 26!
Cipher Text or CT attacks utilize only the cipher text to solve. Example of CT techniques to break Substitution Ciphers:
  1. Single character frequency: compare CT with stats for standard english usage, i.e. 12.7% E, 9.1% T, and 8.1% A 
  2. Digram frequency : compare digram (letter pairs) frequency of commonly used pairs, i.e. 'he', 'an', 'in', and 'th'
  
Vigener Cipher: Use a Key to add to CT and compute modular of each character to obtain ET. Example:
                       Key= LEAHWLEAHWLE
                       CT=  MYSECRETTEXT
                       ET=  YDTMZDJUBBJY
                       
DES: Data Encryption Standard developed by IBM in 1974 uses 2^56 key space to encrypt 64 bits block size
Uniform distribution: All x have equal probability, 1/n,  of occurence
Point distribution: x[0] has 1 probability all else in set, x[1:] have 0 probability
Discrete probability:
 Union Bound: If the probability of the union of  A and B occurring is less than the prob of A plus the prob of B (overlap)
 Uniform Random Variable: Occurrence is uniform; probability of x is based on proportion of solution space composed of x
 Deterministic algorithm: the same input will always generate the same output 
 Randomized algorithm: includes implicit argument r generated randomly each time based on input, and also any other arguments
 Independence: variable x does not depend on value of y
 XOR: exclusive or; calculates modular 2. If you use random to XOR, calculated string always becomes a uniform random variable
 Birthday Paradox: If 24 people are in a room, likely 2 will hare the same birth day. Calculation based on total universe
          (for birthdays, 365) to 1/2 power (e.g. square root) multiplied by 1.2. This formula predicts when likelihood of
          same configuration existing in a set (a collision) is more probable (>50%) than not.

Ciphers must satisfy consistency/correctness property so that all possible messages can be decrypted with the key. And all
possible keys must encrypt message. Must also be efficient, that is, runs in polynomial time.

One-time Pad: Uses a key space made up of random bit string of the same size as message bit string; key is not repeated.
      Encrypted message = Key XOR Message   To decrypt, Cipher Text XOR Key = Message
    All possible messages are equally likely to produce any given Cipher Text. No info about key text can be discerned.
    There is no possible cipher text-only attack, in other words, it has perfect secrecy (but other attacks are possible . . .)
    However, perfect secrecy requires key length >= message length
Pseudo-Random Generator: function Gen = {0,1}^s --maps_to--> {0,1}^n // s-length seed space random bit maps to n output string
   function Gen must be efficiently computable by a deterministic function. Only seed data is random, but output should look
   random. Technically known as a pseudo-random sequence. 
     Encryption:  E(K,M) = M XOR Gen(K)
     Decryption:  D(K,C) = C XOR Gen(K)
  However, PRG is only secure if a combination of efficient algorithm and a known prefix of the output cannot predict the
    key in a non-negligible way. If there is no efficient algorthim no matter what the size of prefix, PRG is unpredictable
 Weak PRGs (Do Not Use):
                           Linear Congruential Generator: relies on linear transformation of seed data to output a few bits
                                                          of output, then iterates again and again. Easy to predict given
                                                          a few output sequences.
                           glibc random(): common library that uses a PRG but is too predictable/broken
Non-negligible: Occurence likely over 1 Gigabyte of data, expressed as probability 1/billionth or 1/2^30
Negligible: Probability of 1/2^80 on the other hand, would not likely occur during the life of the key

Attacks on One Time Pad: 
  Two Time Pad: Reuse same pad again. Can XOR the two CT to obtain an XOR of both M texts. Enough redundancy
    in English and ASCII encoding to tranlate XOR'ed M text. This also means you need to have one key for client --> server
    and another separate key for server --->client. Examples: Project Venona, MS-PPTP, 802.11b WEP, RC4
    Disk Encryption: Don't use a Stream Cipher. Edits to files using disk encryption create saved versions equiv to 2-time pad.
    Network traffic: Negotiate new key for every session (e.g. TLS)
  Malleable/No Integrity: Modifying specific text in CT will have a predictable impact on plain text.
Deprecated Stream Ciphers:
  RC4: Expands 128 bit seed to 2048 bit key. Generates loop with 1 byte output per cycle. Used in HTTPS and WEP.
   Weaknesses: First 256 bytes biased; probability is 2/256 or twice probability of XOR with 0, i.e. not encrypted
    More likely to get 2 bytes/16 bits of zeros in several gigabits of data. Related key attacks
  CSS: Content Scrambling System for DVDs. Based on a hardware stream cipher implementation known as LFSR or Linear Feedback
    Shift Register that shifts right and XOR one bit at a time while certain fixed value points are tapped. Examples: A5, EO
    
Modern Stream Ciphers:
  eStream: Takes both a seed and a nonce as inputs. Nonce = value that will never repeat while key the same (can therefore 
  re-use the key)
  Salsa 20 is a stream cipher designed for software and hardware implementation. 128 or 256 bit keys act as keys and are used 
   with nonce and a counter to create psuedo-random sequence for whatever length is needed. 643 MB/sec rate, supports video
  Entropy as a source of Randomness: hardware RNG 9using physical processes), timing of hardware interrupts (key, mouse, etc.)
  
PRG Security Definitions:
  Secure PRG: If there is no efficient algorithm that can distinguish between pseudo-random string and true random string
      A secure PRG must be unpredictable. If next-bit predictor algorithms cannot predict PRG output better than output of
      a truly random string, than the PRG is shown to be unpredictable and computationally indistinguishable from random string
      
Semantic Security: If no information (LSB, GSB, XOR, etc.) can be learned about m from the CT, it is semantically secure
  Advantage: Between 0 and 1. Close to 0, the attacker is not able to distinguish between messages. Close to 1, he can. 
 One Time Pad is semantically secure because two messages encrypted using it would be indistinguishable to any attacker
 
 


    

    

 



