/*/* Path Traversal

  Problem: If the structure of website is known, you can manually type in URLs to get to hidden information. For example:
           /../     (or %2F..%2F in optimized browsers) will escape to the parent directory.
           In Gruyere, you can get to 'secret' text by traversing to:
           http://google-gruyere.appspot.com/922914398469%2F..%2Fsecret.txt
           
  Fix: Only accept requests for specific resources that you pre-determine either manually or through a crawl. Second best is
       to validate the final destination of URL, but hard to avoid encoding tricks.
       
  Problem: Data-tampering through Path Traversal. Through manipulation of data input that is entered into URL, you can overwrite
           the information that is already stored on a particular URL path. On Gruyere, you can overwrite above problem's target
           by logging in as user named .. and uploading a secret.txt
          
  Fix: Escape dangerous characters (.. is dangerous on Windows) and make case-insensitive. Better yet, assign use unique user id.
       instead in the URL.
       
  Problem: Denial of Service. URLs used for resetting the server, quitting services, etc. can be accessed by anyone. Examples:
            http://google-gruyere.appspot.com/922914398469/quitserver
            http://google-gruyere.appspot.com/922914398469/reset
            
  Fix: Add dangerous URLs to list of protected URLs. Make sure you change capitalization, etc. before security check.
  
  Problem: Overload server by replacing template with one that contains infinite loop. Logged in as ../resources upload
           menubar.gtl containing: [[include:menubar.gtl]]DoS[[/include:menubar.gtl]]
           
  Fix: Protect dangerous URLs -- don't allow upload of template. Validate User login names nad reject dangerous characters.
  
  DOS Best Practices:
      Put safeguards on any memory or computationally intensive task. Do sanity checks on input values. Monitor user
      behavior and enforce usage quotas to prevent abusive patterns.
  
  Problem: Remote Code Execution. A white box attack in which a tampered version of code is uploaded in place of legit file.
           On Gruyere, execute this attack by adding malicious code to gtl.py or sanitize.py and forcing server to restart.
           (possible with DOs attack as in previous). You could also attack gruyere.py directly, but attacks to infrastructure
           are more problematic since they are less noticed.
           
  Fix: Always run your program with the least permission it needs (Gruyere should not be able to read and write to Gruyere 
       directory). Application level checks that ensure user input only selects from developer-defined options, rather than
       being passed in directly to commands that evaluate arbitrary code, like eval() or system(). Bounds check for dangerous
       languages (C++) or improper use of safe languages (Python, Java) native libraries.
       
       */
*/
