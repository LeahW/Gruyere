/*  Configuration Vulnerabilities
 
   Problem: Leaving default settings in place can make it easier for an attacker to find an exploit, particularly if your
            application or framework is 3rd party and easy to obtain. Default logins and passwords are often found online:
                    http://www.governmentsecurity.org/articles/default-logins-and-passwords-for-networked-devices.html
                    
   Fix: Turn off default features you don't use to decrease attack surface. Change admin logins and passwords. 
   
   Problem: Debug features like Stack Trace and Status pages that should not be left in the production code. On Gruyere:
                http://google-gruyere.appspot.com/123/dump.gtl
            is included in the .gtl options but not referenced anywhere. It is a debug feature that allows database dump.
            
   Fix: Delete dump.gtl. Remove debug features if possible, otherwise lockdown by admin login and whitelisted IP address. In 
        case data is exposed, use password hashing: only cryptographic hash and salt value is stored, not actual password.
        
   Problem: Even if debug feature is removed, attacked can upload similar script of their own and run it.
   
   Fix: Ideally, only certain file types should be accepted for upload. Don't store user-uploaded files in same location as
        application files. Only allow files that are part of Gruyere to be treated as templates.
        
   Problem: Flaws in Template handling allow another attack method. On Gruyere, if a private snippet contains:
               {{_db:pprint}}
            it is handled first by ExpandTemplate, which then calls _ExpandBlocks followed by _ExpandVariables, but
            _ExpandBlocks calls ExpandTemplate on nested blocks. So if a variable is expanded inside a nested block and 
            contains something that looks like a variable template, it will get expanded a second time.
            
   Fix: Modify Template Expansion codes so that it never re-parses inserted variable values. Ideally, templates should only
        access data specifically provided to them. You could do this by associating a database query with the template and
        only data matching that query can be passed to template. This would allow you to apply user permissions to query.
        
   AJAX Vulnerabilities
   
   Problem:
 */
   
