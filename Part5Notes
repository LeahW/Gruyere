/*  Configuration Vulnerabilities
 
   Problem: Leaving default settings in place can make it easier for an attacker to find an exploit, particularly if your
            application or framework is 3rd party and easy to obtain. Default logins and passwords are often found online:
                    http://www.governmentsecurity.org/articles/default-logins-and-passwords-for-networked-devices.html
                    
   Fix: Turn off default features you don't use to decrease attack surface. Change admin logins and passwords. 
   
   Problem: Debug features like Stack Trace and Status pages that should not be left in the production code. On Gruyere:
                http://google-gruyere.appspot.com/123/dump.gtl
            is included in the .gtl options but not referenced anywhere. It is a debug feature that allows database dump.
            
   Fix: Delete dump.gtl. Remove debug features if possible, otherwise lockdown by admin login and whitelisted IP address. In 
        case data is exposed, use password hashing: only cryptographic hash and salt value is stored, not actual password.
        
   Problem: Even if debug feature is removed, attacked can upload similar script of their own and run it.
   
   Fix: Ideally, only certain file types should be accepted for upload. Don't store user-uploaded files in same location as
        application files. Only allow files that are part of Gruyere to be treated as templates.
        
   Problem: Flaws in Template handling allow another attack method. On Gruyere, if a private snippet contains:
               {{_db:pprint}}
            it is handled first by ExpandTemplate, which then calls _ExpandBlocks followed by _ExpandVariables, but
            _ExpandBlocks calls ExpandTemplate on nested blocks. So if a variable is expanded inside a nested block and 
            contains something that looks like a variable template, it will get expanded a second time.
            
   Fix: Modify Template Expansion codes so that it never re-parses inserted variable values. Ideally, templates should only
        access data specifically provided to them. You could do this by associating a database query with the template and
        only data matching that query can be passed to template. This would allow you to apply user permissions to query.
        
   AJAX Vulnerabilities
   
   Problem: DOS via AJAX. A new JSON object is created that duplicates existing object and replaces it's value. On Gruyere, 
            a new login id of private_snippet will create new values with their snippets that replaces other users' private
            snippet section of profile page.
            
   Fix: More robust JSON structure that references the user when calling profile private snippets.
   
   Problem: Phishing via AJAX. By creating a login id that duplicates DOM element, you can replace value for that element.
            On Gruyere, a login of menu-right can create a snippet that replaces the menu-right section of DOM, for example 
            a new a href pointed to malicious location.
        
   Fix: Ensure that there cannot be a conflict of DOM identifiers by adding a prefix (user-- or unique identifier) to any
        user-provided inputs. 
        
   Brief Explanations of other attacks not covered in the Gruyere CodeLab:
   
     Buffer Overflow: An application does not properly guard its buffers and allows user data to write past the end of a
     buffer. This excess data can modify other variables, including pointers and function return addresses, leading to
     arbitrary code execution. N/A/ to Gruyere because it uses Python, which doesn't allow read/write outside bounds of array.
     
     Integer Overflow: an integer computation silently returns an incorrect result, the application will operate incorrectly.
     In the best case, the application fails. In the worst case, there is a security bug. For example, if an application
     checks that length + 1 < limit then this will succeed if length is the largest positive integer value, which can then
     expose a buffer overflow vulnerability. N/A to Gruyere because it uses Python, which doesn't allow integer overflow.
     
     Platform Vulnerablilites: Outside scope of the CodeLab, but in Gruyere's case potential sources of platform
     vulnerabilities include Python runtime system and libraries, AppEngine, the operating system that Gruyere runs on
     and the client side software (including the web browser) that users use to run Gruyere.
     
     SQL Injection: Allows attackers to inject arbitrary scripts into SQL queries. When a SQL query is executed it can either
     read or write data, so an attacker can use SQL injection to read your entire database as well as overwrite it. Avoid by
     using API calls instead of string concatenation to build SQL queries. N/A to Gruyere because it doesn't use SQL.
          
 */
   
