/* Client-State Manipulation

 Problem: Elevation of Privilege
    The Edit Profile settings look at cookies to see if a login is an administrator. You can create a false cookie by visiting:
       http://google-gruyere.appspot.com/123/saveprofile?action=update&is_admin=True
    and then log out and back in to create a new cookie based on this browser history.
    Additonally, you can visit:
       http://google-gruyere.appspot.com/123/saveprofile?action=update&is_admin=True&uid=username
    to make ever user login an admin.
    
    This is possible due to using [[if:_cookie.is_admin]] together with
    <form method='get' action='/{{_unique_id}}/saveprofile'> in source code. 
    
 Fix: Authorize access on the server-side at the time request is made. Don't leave it to the browser to toggle visibility.

 Problem: Cookie Manipulation
   On Gruyere, cookies look like hash|username|admin|author so you can gain access to the user account for Foo by logging in as 
   Foo|admin|author . This will create a hash of hash|foo|admin|author||author with the result of logging you in as Foo but with
   Administrator privileges.
   
 Fix: Restrict the characters that can be used in usernames. Use cookie-parsing that escapes usernames and rejects cookies that
    don't meet the expected pattern. Use a secure, cryptographic hash function and also encrypt cookie, don't use plain text.
    
  Additional exploit: There is a 16 character limit on the username, but it is imposed on the client side so can be bypassed:
    http://google-gruyere.appspot.com/123/saveprofile?action=new&uid=administrator|admin|author&pw=secret
  Fix this by implementing the 16 character limit on server side as well.
 
  Problem: XSRF or Cross Site Request Forgery 
            Webpages can reference resources in other domains. Scripts are run in the context of host page, not the linked page 
            where script actually resides. This can lead to user data leaks. On Gruyere, you can use XSRF by inserting
            http://google-gruyere.appspot.com/922914398469/deletesnippet?index=0
            into your user icon. When any user views this icon, on main page for example, code will run with that user's cookie
            and delete their snippet. 
            
  Fix: For Delete, use Post instead of Get method (won't be re-sent without user input or leak any URL token).
       Use a time-stamped authentication token in request that is specific to the kind of action being requested.
       
  Problem: XSSI Cross Site Script Inclusion
           A website can reference other website's images, scripts, or other resources, and they will run in the context
           of the page calling the resource.
  
  */
