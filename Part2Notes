/*
Problem: REFLECTED XSS attack, the attack is in the request itself (frequently the URL) and the vulnerability occurs when
the server inserts the attack in the response verbatim or incorrectly escaped or sanitized. The victim triggers the attack
by browsing to a malicious URL created by the attacker. In a STORED XSS attack, the attacker stores the attack in the application
(e.g., in a snippet) and the victim triggers the attack by browsing to a page on the server that renders the attack, by not
properly escaping or sanitizing the stored data.

Reflected XSS example on Gruyere: Go to http://google-gruyere.appspot.com/922914398469/flowers+%3Cscript%3Ealert(1)%3C/script%3E

Fix: Validate, Escape, Sanitize any untrusted user data.
     In this case, error messages are displayed using error.gtl, but are not escaped in the template.

Stored XSS example on Gruyere: Upload a file called 
                               GruyereMe%3cscript%3ealert(1)%3c%2Fscript%3e.txt   (contains script tags using URL % encoding)
                               and browse to it: http://google-gruyere.appspot.com/922914398469/Me/GruyereMe%3Cscript%3Ealert(1)%3C%2Fscript%3E.txt
                               
Fix: Host the content on a separate domain so the script won't have access to any content from your domain.
     Instead of hosting user content on example.com/username we would host it at username.usercontent.example.com or
     username.example-usercontent.com. (Including something like "usercontent" in the domain name avoids attackers 
     registering usernames that look innocent like wwww and using them for phishing attacks.)
/*

/* XSS by injecting a value in an HTML attribute (via form field or DevTools)

Examples:  Enter this in an attribute field:        red' onload='alert(1)' onmouseover='alert(2)
           Insert this using DevTools, etc.         <input type="text" value="red" onload="alert(1)" onmouseover="alert(2)" name="color">

Fix: Sanitize user data. Some HTML attributes to be disallowed (both upper & lowercase) include:
     'onblur', 'onchange', 'onclick', 'ondblclick', 'onfocus', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onmousedown',
     'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onreset', 'onselect', 'onsubmit', 'onunload'
     
The right approach to HTML sanitization is to:
   1. Parse the input into an intermediate DOM structure, then rebuild the body as well-formed output.
   2. Use strict whitelists for allowed tags and attributes.
   3. Apply strict sanitization of URL and CSS attributes if they are permitted.
   
 Other user-provided inputs that need to be sanitized: colors, fonts, sizes, urls. Use input validation (return an 'Invalid'
  message) as well as output validation to protect against future vulnerabilities.
  
*/
